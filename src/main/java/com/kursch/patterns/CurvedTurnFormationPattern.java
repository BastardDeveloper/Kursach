package com.kursch.patterns;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.MathUtils;

public class CurvedTurnFormationPattern implements MovementPattern {
    private final Vector2 start;
    private final Vector2 playerTarget;
    private final Vector2 formationTarget;
    private final float duration;
    private final int direction; // 1 = –≤–ø—Ä–∞–≤–æ, -1 = –≤–ª–µ–≤–æ
    private final float turnRadius;

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private final Vector2 approachPoint;
    private final Vector2 arcCenter;
    private final float arcStartAngle;
    private final float arcEndAngle;
    private final Vector2 exitPoint;

    public CurvedTurnFormationPattern(Vector2 start, Vector2 playerTarget, Vector2 formationTarget,
            float duration, float turnRadius, int direction) {
        this.start = new Vector2(start);
        this.playerTarget = new Vector2(playerTarget);
        this.formationTarget = new Vector2(formationTarget);
        this.duration = Math.max(0.1f, duration);
        this.turnRadius = turnRadius;
        this.direction = MathUtils.clamp(direction, -1, 1);

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        this.approachPoint = calculateApproachPoint();
        this.arcCenter = calculateArcCenter();
        this.arcStartAngle = calculateArcStartAngle();
        this.arcEndAngle = calculateArcEndAngle();
        this.exitPoint = calculateExitPoint();
    }

    @Override
    public Vector2 getPosition(float elapsedTime) {
        float t = MathUtils.clamp(elapsedTime / duration, 0f, 1f);

        // üîπ –§–∞–∑–∞ 1 (0.0‚Äì0.4): –ü–æ–¥–ª—ë—Ç –∫ –∏–≥—Ä–æ–∫—É —Å –Ω–µ–±–æ–ª—å—à–∏–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
        if (t < 0.4f) {
            float phase = easeInOut(t / 0.4f);
            return new Vector2(start).lerp(approachPoint, phase);
        }

        // üîπ –§–∞–∑–∞ 2 (0.4‚Äì0.75): –ü–µ—Ç–ª—è –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
        else if (t < 0.75f) {
            float phase = (t - 0.4f) / 0.35f;
            float angle = MathUtils.lerp(arcStartAngle, arcEndAngle, easeInOut(phase));

            float x = arcCenter.x + MathUtils.cos(angle) * turnRadius;
            float y = arcCenter.y + MathUtils.sin(angle) * turnRadius;

            return new Vector2(x, y);
        }

        // üîπ –§–∞–∑–∞ 3 (0.75‚Äì1.0): –ü–ª–∞–≤–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ü–∏—é
        else {
            float phase = (t - 0.75f) / 0.25f;
            return new Vector2(exitPoint).lerp(formationTarget, easeOut(phase));
        }
    }

    // –¢–æ—á–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –∏–≥—Ä–æ–∫—É (—á—É—Ç—å –±–ª–∏–∂–µ —Å–µ—Ä–µ–¥–∏–Ω—ã)
    private Vector2 calculateApproachPoint() {
        return new Vector2(start).lerp(playerTarget, 0.6f);
    }

    // –¶–µ–Ω—Ç—Ä –¥—É–≥–∏ –¥–ª—è –ø–µ—Ç–ª–∏
    private Vector2 calculateArcCenter() {
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –ø–æ–¥–ª—ë—Ç–∞ –∫ –∏–≥—Ä–æ–∫—É
        Vector2 dirToPlayer = new Vector2(playerTarget).sub(approachPoint).nor();
        // –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
        Vector2 perpendicular = new Vector2(-dirToPlayer.y, dirToPlayer.x).scl(direction);
        // –¶–µ–Ω—Ç—Ä –¥—É–≥–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¢–û–ß–ö–ò –ü–û–î–õ–Å–¢–ê, –Ω–µ –∏–≥—Ä–æ–∫–∞
        return new Vector2(approachPoint).add(perpendicular.scl(turnRadius));
    }

    // –ù–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –¥—É–≥–∏
    private float calculateArcStartAngle() {
        return MathUtils.atan2(approachPoint.y - arcCenter.y, approachPoint.x - arcCenter.x);
    }

    // –ö–æ–Ω–µ—á–Ω—ã–π —É–≥–æ–ª –¥—É–≥–∏ (–ø–æ–ª–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç 180¬∞ + –Ω–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è)
    private float calculateArcEndAngle() {
        float targetAngle = MathUtils.atan2(formationTarget.y - arcCenter.y,
                formationTarget.x - arcCenter.x);

        // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        float angleDiff = targetAngle - arcStartAngle;
        while (angleDiff > MathUtils.PI)
            angleDiff -= MathUtils.PI2;
        while (angleDiff < -MathUtils.PI)
            angleDiff += MathUtils.PI2;

        // –î–µ–ª–∞–µ–º –ø–µ—Ç–ª—é –Ω–µ —Ä–æ–≤–Ω–æ –Ω–∞ 180¬∞, –∞ —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ü–∏–∏
        return arcStartAngle + MathUtils.PI * direction + angleDiff * 0.3f;
    }

    // –¢–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–µ—Ç–ª–∏
    private Vector2 calculateExitPoint() {
        float x = arcCenter.x + MathUtils.cos(arcEndAngle) * turnRadius;
        float y = arcCenter.y + MathUtils.sin(arcEndAngle) * turnRadius;
        return new Vector2(x, y);
    }

    // Ease-in-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    private float easeInOut(float t) {
        return t < 0.5f
                ? 2f * t * t
                : 1f - (1f - 2f * (t - 0.5f)) * (1f - 2f * (t - 0.5f)) / 2f;
    }

    // Ease-out –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
    private float easeOut(float t) {
        return 1f - (1f - t) * (1f - t);
    }

    @Override
    public boolean isComplete(float time) {
        return time >= duration;
    }
}